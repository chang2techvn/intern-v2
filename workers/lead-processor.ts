import { api } from 'encore.dev/api';
import { NewLeadQueue, LeadDLQ } from '../events/sqs-subscriptions';
import { LeadEventPayload, LeadEventType } from '../events/sns-topics';
import { logAccessAttempt } from '../services/admin-service';

// Khai b√°o worker ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán t·ª´ h√†ng ƒë·ª£i SQS
export const processNewLeadEvent = NewLeadQueue.handle(async (event: LeadEventPayload) => {
    try {
        console.log(`\n=================== [WORKER] LEAD PROCESSOR START ===================`);
        console.log(`[WORKER] Processing new lead event: ${JSON.stringify(event, null, 2)}`);
        
        // Ki·ªÉm tra lo·∫°i s·ª± ki·ªán
        if (event.eventType !== LeadEventType.NEW) {
            console.warn(`[WORKER] ‚úó Received unexpected event type: ${event.eventType}`);
            console.log(`=================== [WORKER] LEAD PROCESSOR ABORTED ===================\n`);
            return;
        }
        
        console.log(`[WORKER] ‚úì Confirmed event type: ${event.eventType}`);
        
        // Tr√≠ch xu·∫•t th√¥ng tin lead t·ª´ s·ª± ki·ªán
        const { lead, metadata } = event;
        console.log(`[WORKER] Processing lead: ${lead.id} - ${lead.name} (${lead.email})`);
        
        // Ki·ªÉm tra xem c√≥ c·ªù b√°o l·ªói gi·∫£ l·∫≠p kh√¥ng
        if (lead.source === 'test-error' || (metadata as any).simulateError === true) {
            console.log(`[WORKER] üî¥ Detected test-error flag. Simulating processing failure...`);
            throw new Error(`Simulated processing error for test lead: ${lead.id}`);
        }
        
        // Trong th·ª±c t·∫ø, c√≥ th·ªÉ th·ª±c hi·ªán c√°c t√°c v·ª• nh∆∞:
        // 1. G·ª≠i email ch√†o m·ª´ng kh√°ch h√†ng ti·ªÅm nƒÉng
        // 2. Ph√¢n lo·∫°i lead d·ª±a tr√™n thu·ªôc t√≠nh
        // 3. C·∫≠p nh·∫≠t h·ªá th·ªëng CRM
        // 4. Th√¥ng b√°o cho sales team
        
        // B·∫Øt ƒë·∫ßu c√°c t√°c v·ª• x·ª≠ l√Ω
        console.log(`[WORKER] Starting lead processing tasks...`);
        
        // V√≠ d·ª•: Gi·∫£ l·∫≠p vi·ªác g·ª≠i email
        console.log(`[WORKER] Task 1: Sending welcome email`);
        await simulateSendWelcomeEmail(lead.email, lead.name);
        
        // V√≠ d·ª•: Gi·∫£ l·∫≠p vi·ªác c·∫≠p nh·∫≠t CRM
        console.log(`[WORKER] Task 2: Updating CRM system`);
        await simulateUpdateCRM(lead.id, lead);
        
        // V√≠ d·ª•: Gi·∫£ l·∫≠p vi·ªác ph√¢n lo·∫°i lead
        console.log(`[WORKER] Task 3: Categorizing lead`);
        const category = await simulateLeadCategorization(lead);
        console.log(`[WORKER] Lead categorized as: ${category}`);
        
        // Ghi log x·ª≠ l√Ω th√†nh c√¥ng
        logAccessAttempt(
            "/events/lead-processor",
            "process new lead event",
            true,
            metadata.userID,
            metadata.workspaceID,
            `Successfully processed event for lead: ${lead.id} - ${lead.name}`,
            "event"
        );
        
        console.log(`[WORKER] ‚úì Successfully processed new lead event for lead ID: ${lead.id}`);
        console.log(`=================== [WORKER] LEAD PROCESSOR COMPLETE ===================\n`);
    } catch (error) {
        console.error(`[WORKER] ‚úó Error processing new lead event:`, error);
        
        // Ghi log l·ªói
        logAccessAttempt(
            "/events/lead-processor",
            "process new lead event",
            false,
            event?.metadata?.userID || "system",
            event?.metadata?.workspaceID || "unknown",
            `Error: ${(error as Error).message}`,
            "event"
        );
        
        console.log(`=================== [WORKER] LEAD PROCESSOR FAILED ===================\n`);
        // N√©m l·∫°i l·ªói ƒë·ªÉ SQS queue hi·ªÉu r·∫±ng c·∫ßn x·ª≠ l√Ω l·∫°i ho·∫∑c chuy·ªÉn sang DLQ
        throw error;
    }
});

// H√†m gi·∫£ l·∫≠p vi·ªác g·ª≠i email ch√†o m·ª´ng
async function simulateSendWelcomeEmail(email: string, name: string): Promise<void> {
    console.log(`[EMAIL SIMULATION] ‚è≥ Sending welcome email to ${name} at ${email}`);
    
    // Gi·∫£ l·∫≠p vi·ªác g·ª≠i email m·∫•t m·ªôt ch√∫t th·ªùi gian
    await new Promise(resolve => setTimeout(resolve, 200));
    
    console.log(`[EMAIL SIMULATION] ‚úì Welcome email sent to ${email}`);
}

// H√†m gi·∫£ l·∫≠p vi·ªác c·∫≠p nh·∫≠t CRM
async function simulateUpdateCRM(leadId: number, leadData: any): Promise<void> {
    console.log(`[CRM SIMULATION] ‚è≥ Updating CRM record for lead ${leadId}`);
    
    // Gi·∫£ l·∫≠p qu√° tr√¨nh c·∫≠p nh·∫≠t CRM
    await new Promise(resolve => setTimeout(resolve, 150));
    
    console.log(`[CRM SIMULATION] ‚úì CRM record updated for lead ${leadId}`);
}

// H√†m gi·∫£ l·∫≠p vi·ªác ph√¢n lo·∫°i lead
async function simulateLeadCategorization(leadData: any): Promise<string> {
    console.log(`[CATEGORIZATION] ‚è≥ Analyzing lead data for categorization`);
    
    // Gi·∫£ l·∫≠p qu√° tr√¨nh ph√¢n t√≠ch
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Ph√¢n lo·∫°i d·ª±a tr√™n ngu·ªìn
    let category = 'General';
    
    if (leadData.source === 'website') {
        category = 'Web Lead';
    } else if (leadData.source === 'referral') {
        category = 'Referral Lead';
    } else if (leadData.source === 'advertisement') {
        category = 'Marketing Lead';
    } else if (leadData.source === 'test') {
        category = 'Test Lead';
    }
    
    console.log(`[CATEGORIZATION] ‚úì Lead categorized as ${category}`);
    return category;
}