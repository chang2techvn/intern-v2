name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check
      
      - name: Debug directory structure
        run: find . -name "*.test.ts" -type f
      
      - name: Run tests
        run: npm test
  
  deploy:
    name: Deploy to Encore Cloud
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install Encore CLI
        run: |
          curl -s https://encore.dev/install.sh | bash
          echo "$HOME/.encore/bin" >> $GITHUB_PATH
      
      - name: Set up Git for Encore
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to Encore Cloud via local Git deployment script
        env:
          ENCORE_AUTH_TOKEN: ${{ secrets.ENCORE_AUTH_TOKEN }}
        run: |
          # Create deployment directory
          mkdir -p ~/encore-deploy
          cd ~/encore-deploy
          
          # Clone repository afresh for deployment
          echo "Cloning repository for deployment..."
          git clone $GITHUB_WORKSPACE .
          
          # Extract app ID
          APP_ID=$(cat encore.app | grep id | cut -d'"' -f4)
          echo "App ID: $APP_ID"
          
          # Create an encoded token file for auth
          echo "Configuring authentication..."
          mkdir -p ~/.encore
          echo "$ENCORE_AUTH_TOKEN" > ~/.encore/authtoken
          chmod 600 ~/.encore/authtoken
          
          # Setup SSH known hosts
          mkdir -p ~/.ssh
          ssh-keyscan git.encore.dev >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Disable StrictHostKeyChecking for encore domains
          cat > ~/.ssh/config << EOF
          Host *.encore.dev git.encore.dev
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config
          
          # Create deploy script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Configure Git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Get the app ID
          APP_ID=$(cat encore.app | grep id | cut -d'"' -f4)
          AUTH_TOKEN=$(cat ~/.encore/authtoken)
          
          # Set environment variable for git-remote-encore
          export ENCORE_AUTH="$AUTH_TOKEN"
          
          # Configure Git credential helper
          git config --global credential.helper store
          echo "https://token:${AUTH_TOKEN}@git.encore.dev" > ~/.git-credentials
          chmod 600 ~/.git-credentials
          
          # Enable verbose output for debugging
          export GIT_TRACE=1
          export GIT_CURL_VERBOSE=1
          export GIT_SSH_COMMAND="ssh -v -o StrictHostKeyChecking=no"
          
          # Add Encore remote
          git remote remove encore 2>/dev/null || true
          git remote add encore "encore://${APP_ID}.git"
          echo "Remote added:"
          git remote -v
          
          # Push to Encore
          echo "Pushing to Encore Cloud..."
          git push -v encore HEAD:refs/heads/main -f
          
          # Check push result
          if [ $? -eq 0 ]; then
            echo "Successfully deployed to Encore Cloud!"
          else
            echo "Failed to deploy to Encore Cloud"
            exit 1
          fi
          EOF
          
          chmod +x deploy.sh
          
          # Run the deployment script
          echo "Executing deployment script..."
          ./deploy.sh
          
          echo "===== Deployment process completed ====="
          echo "Check deployment status at: https://app.encore.cloud/$APP_ID"
      
      - name: Verify deployment status
        if: always()
        run: |
          APP_ID=$(cat encore.app | grep id | cut -d'"' -f4)
          echo "You can check the deployment status at: https://app.encore.cloud/$APP_ID"
          echo "If deployment was unsuccessful, you may need to:"
          echo "1. Update your ENCORE_AUTH_TOKEN in GitHub Secrets"
          echo "2. Manually deploy from your terminal using the method that worked previously"